=================== JWT Token =================== 

1. composer require tymon/jwt-auth

2. Add the service provider to the providers array in the config/app.php config file as follows:
	'providers' => [ Tymon\JWTAuth\Providers\LaravelServiceProvider::class, ]

3. Run the following command to publish the package config file:
		php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"

4. I have included a helper command to generate a key for you:
		php artisan jwt:secret
	This will update your .env file with something like JWT_SECRET=foobar

5. Update your User model
	5.1 Firstly you need to implement the Tymon\JWTAuth\Contracts\JWTSubject contract on your User model, 
	5.2 which requires that you implement the 2 methods getJWTIdentifier() and getJWTCustomClaims().
		<?php
			namespace App;
			use Tymon\JWTAuth\Contracts\JWTSubject;
			use Illuminate\Notifications\Notifiable;
			use Illuminate\Foundation\Auth\User as Authenticatable;
			class User extends Authenticatable implements JWTSubject{
				use Notifiable;

				public function getJWTIdentifier() { 
					return $this->getKey(); 
					}

				public function getJWTCustomClaims() { 
					return []; 
				}
			}

6. Configure Auth guard
	Inside the config/auth.php file you will need to make a few changes to configure Laravel to use the jwt guard to power your application authentication.
	'defaults' => [
		'guard' => 'api',
		'passwords' => 'users',
	],
	'guards' => [
		'api' => [
			'driver' => 'jwt',
			'provider' => 'users',
		],
	],
	Here we are telling the api guard to use the jwt driver, and we are setting the api guard as the default.

7. Add some basic authentication routes
	First let's add some routes in routes/api.php as follows
	Route::group([ 'middleware' => 'api', 'prefix' => 'auth' ], function ($router) {
		Route::post('login', 'AuthController@login');
		Route::post('logout', 'AuthController@logout');
		Route::post('refresh', 'AuthController@refresh');
		Route::post('me', 'AuthController@me');
	});

8. Create the AuthController
	 <?php
		namespace App\Http\Controllers;
		use Illuminate\Support\Facades\Auth;
		use App\Http\Controllers\Controller;
		class AuthController extends Controller {
			
			public function __construct() { 
				$this->middleware('auth:api', ['except' => ['login']]); 
			}
			
			public function login() {
				$credentials = request(['email', 'password']);
				if (! $token = auth()->attempt($credentials)) {
					return response()->json(['error' => 'Unauthorized'], 401);
				}
				return $this->respondWithToken($token);
			}
			
			public function me() {
				return response()->json(auth()->user());
			}
			
			public function logout() {
				auth()->logout();
				return response()->json(['message' => 'Successfully logged out']);
			}
			
			public function refresh() {
				return $this->respondWithToken(auth()->refresh());
			}
			
			protected function respondWithToken($token){
				return response()->json([
					'access_token' => $token,
					'token_type' => 'bearer',
					'expires_in' => auth()->factory()->getTTL() * 60
				]);
			}
		}

9. You must see like this
	{
		"access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ",
		"token_type": "bearer",
		"expires_in": 3600
	}

10. Authenticated requests
	There are a number of ways to send the token via http:
		10.1 Authorization header
				Authorization: Bearer eyJhbGciOiJIUzI1NiI...
		10.2 Query string parameter
				http://example.dev/me?token=eyJhbGciOiJIUzI1NiI...
		10.3 Post parameter
		10.4 Cookies
		10.5 Laravel route parameter

11. Methods 
	11.1 attempt() -> Attempt to authenticate a user via some credentials.
		$token = auth()->attempt($credentials);
		login()
	11.2 Log a user in and return a jwt for them.
		$user = User::first();
		$token = auth()->login($user);
	11.3 user() -> Get the currently authenticated user.
		$user = auth()->user();
	11.4 serOrFail() -> Get the currently authenticated user or throw an exception.
		try { $user = auth()->userOrFail(); } 
		catch (\Tymon\JWTAuth\Exceptions\UserNotDefinedException $e) { // do something }
	11.5 serOrFail() -> Get the currently authenticated user or throw an exception.
		try { $user = auth()->userOrFail(); } 
		catch (\Tymon\JWTAuth\Exceptions\UserNotDefinedException $e) { // do something }
	11.6 refresh() -> Refresh a token, which invalidates the current one
		$newToken = auth()->refresh();
		// Pass true as the first param to force the token to be blacklisted "forever".
		// The second parameter will reset the claims for the new token
		$newToken = auth()->refresh(true, true);
	11.7 invalidate() -> Invalidate the token (add it to the blacklist)
		auth()->invalidate();
		// Pass true as the first param to force the token to be blacklisted "forever".
		auth()->invalidate(true);
	11.8 tokenById() -> Get a token based on a given user's id.
		$token = auth()->tokenById(123);

12. Let's review some of the options in the config/jwt.php
	'secret' => env('JWT_SECRET'),
